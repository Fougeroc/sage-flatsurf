r"""
Class for matrix groups generated by a finite number of elements.

.. TODO::

    - The stupid test ``_test_change_ring`` fails because if a matrix ``m`` is
      immutable then ``m.change_ring(m.base_ring())`` returns ``m`` and not a
      copy.

    - ``m.multiplicative_order()``

EXAMPLES::

    sage: m1 = matrix([[1,1],[0,1]])
    sage: m2 = matrix([[1,0],[1,1]])
    sage: G = FinitelyGeneratedMatrixSubgroup([m1,m2])
    sage: G
    Matrix group generated by:
    [1 1]  [1 0]
    [0 1], [1 1]
    sage: it = iter(G)
    sage: [it.next() for _ in xrange(5)]
    [
    [1 0]  [1 1]  [1 2]  [2 1]  [ 0  1]
    [0 1], [0 1], [0 1], [1 1], [-1  1]
    ]
"""

from sage.structure.parent import Parent
from sage.groups.group import Group
from sage.structure.sequence import Sequence
from sage.rings.infinity import Infinity

def matrix_multiplicative_order(m):
    r"""
    Return the order of the 2x2 matrix ``m``.
    """
    if m.det() != 1:
        return Infinity

    # now we compute the potentially preserved quadratic form
    # i.e. looking for A such that m^t A m = A
    m00 = m[0,0]
    m01 = m[0,1]
    m10 = m[1,0]
    m11 = m[1,1]
    M = matrix(m.base_ring(),
        [[m00**2, m00*m10, m10**2],
         [m00*m01, m00*m11, m10*m11],
         [m01**2, m01*m11, m11**2]])

    # might there be several solutions ? (other than scaling)... should not
    try:
        v = (M-identity_matrix(3)).solve_right()
    except ValueError: # no solution
        return False

    raise NotImplementedError("your matrix is conjugate to an orthogonal matrix but the angle might not be rational.. to be terminated.")

    # then we conjugate and check if the angles are rational
    # we need to take a square root of a symmetric matrix... this is not implemented!
    A = matrix(m.base_ring(), [[v[0],v[1]],[v[1],v[2]]])

class FinitelyGeneratedMatrixSubgroup(Group):
    def __init__(self, matrices, matrix_space=None, category=None):
        if matrix_space is None:
            from sage.matrix.matrix_space import MatrixSpace
            ring = Sequence(matrices).universe().base_ring()
            matrix_space = MatrixSpace(ring,2)

        self._generators = map(matrix_space,matrices)
        for m in self._generators:
            m.set_immutable()
        self._matrix_space = matrix_space

        if category is None:
            from sage.categories.groups import Groups
            category = Groups()

        Parent.__init__(self, category=category, facade=matrix_space)

    def _repr_(self):
        mat_string = [g.str().split('\n') for g in self._generators]
        return ("Matrix group generated by:\n" +
                "  ".join(x[0] for x in mat_string) + "\n" +
                ", ".join(x[1] for x in mat_string))

    def is_finite(self):
        r"""
        Is there a reasonable algorithm for 2x2 matrices ?

        A group is finite if and only if it is conjugate to a subgroup of SO(2).
        """
        # determinant test
        if any(m.det() != 1 for m in self._generators):
            return False

        raise NotImplementedError("the algorithm is not complete")

    def cardinality(self):
        return Infinity

    def __iter__(self):
        yield self.one()
        s = set([self.one()])
        wait = self._generators[:]
        while wait:
            p = wait.pop(0)
            if p not in s:
                yield p
                s.add(p)
            for g in self._generators:
                for m in [p*g, p*g.inverse(), g*p, g.inverse()*p]:
                    m.set_immutable()
                    if m not in s:
                        yield m
                        s.add(m)
                        wait.append(m)

    def __eq__(self, other):
        return (isinstance(other, FinitelyGeneratedMatrixSubgroup) and
                self._generators == other._generators)

    def some_elements(self):
        l = []
        n = 0
        for g in self:
            l.append(g)
            n += 1
            if n == 5:
                break
        return l

    def __ne__(self, other):
        return not self.__eq__(other)

    def __reduce__(self):
        return FinitelyGeneratedMatrixSubgroup, (self._generators, self._matrix_space)

    def one(self):
        return self._matrix_space.identity_matrix()

    def an_element(self):
        return self._generators[0]

    def gen(self, i):
        return self._generators[i]
